// Strip unit from a number value
// Usage :
//    strip-units(16px);
// Will return "16" (as a number)
@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

// Write font-size rules for each given breakpoint, the font-size is calculated for each 
// breakpoint
//
// Usage :
//    $resos: $screenSmall, $screenMedium, $screenXlarge;
//    @include fit-text(5.2px, $resos);
//
// * $base-size: base size to use in calcul;
// * $resolutions: list of breakpoint width sizes to break on;
// * $default-size: default width size to use for the default property;
// * $min-size: minimal font size value, if a computed value is higher, the minimal 
//   value is used instead;
// * $ratio: use ratio in calcul with the base-size
// * $unit: the unit to use in the font-size property, must be like "1px" or "1em" etc..
@mixin fit-text($base-size, $resolutions, $default-width: 1920, $min-size: 0, $ratio: 0.0075, $unit: 1px) {
    font-size: $base-size*($default-width * $ratio);
    
    @each $breakpoint-item in $resolutions {
        $thisFontSize : strip-units($base-size*(strip-units($breakpoint-item)*$ratio));
        @media (max-width: $breakpoint-item) {
            @if $thisFontSize > $min-size {
                    font-size: $thisFontSize*$unit;
            } @else {
                font-size: $min-size*$unit;
            }
        }
    }
}

@mixin box-3D($size: 40px, $weight: 10px, $font-color: #ffffff, $front-bgcolor: rgb(227, 202, 96), $top-bgcolor: rgb(245, 235, 189), $left-bgcolor: rgb(203, 179, 77)){
    $weight: 10px;

    .box3d {
        width: $size;
        height: $size;
        padding: ($weight - ($weight/5)) $weight/2;
        margin: $weight;
        position: absolute;
        left: $weight*2;
        top: $size;
        font-size: $size/2;
        color: $font-color;
        line-height: $size/2;
        text-align: center;
        background-color: $front-bgcolor;
        text-shadow: none;
    }
    .box3d::before {
        width: $weight;
        height: 100%;
        background-color: grey;
        content:'';
        display: block;
        position: absolute;
        top: -$weight/2;
        left: -$weight;
        @include skew(0, 45deg);
        background-color: $left-bgcolor;
    }
    .box3d::after {
        width: 100%;
        height: $weight;
        background-color: grey;
        content:'';
        display: block;
        position: absolute;
        right: $weight/2;
        top: -$weight;
        @include skewX(45deg);
        background-color: $top-bgcolor;
    }
    //.box3d.alt:active {
    //  -webkit-transform: translate(-10px, -10px);
    //  -moz-transform: translate(-10px, -10px);
    //  -o-transform: translate(-10px, -10px);
    //  -ms-transform: translate(-10px, -10px);
    //}

    .box3d:active::before {
        width: $weight/2;
        top: -$weight/4;
        left: -$weight/2;
    }

    .box3d:active::after {
        height: $weight/2;
        right: $weight/4;
        top: -$weight/2;
    }
    // .box3d:active:after, .box3d:active:before {
    //  display: none;
    //}
}

// Base stuff to add for content with Foundation
//@mixin foundation-content-base(){}